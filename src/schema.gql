type MarkdownRemark implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  frontmatter: MarkdownRemarkFrontmatter
  excerpt(pruneLength: Int = 140, truncate: Boolean = false): String
  rawMarkdownBody: String
  fileAbsolutePath: String
  fields: MarkdownRemarkFields
  html: String
  htmlAst: JSON
  excerptAst(pruneLength: Int = 140, truncate: Boolean = false): JSON
  headings(depth: HeadingLevels): [MarkdownHeading]
  timeToRead: Int
  tableOfContents(pathToSlugField: String = "fields.slug", maxDepth: Int, heading: String): String
  wordCount: wordCount
}

type MarkdownRemarkFrontmatter {
  title: String
  headerImage: String
  headerImageDesc: String
  id: String
  published: Boolean
  email: String
  md5: String
  date(
    """
    Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY
    MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for
    documentation for different tokens.
    """
    formatString: String

    """Returns a string generated with Moment.js' `fromNow` function"""
    fromNow: Boolean

    """
    Returns the difference between this date and the current time. Defaults to
    "milliseconds" but you can also pass in as the measurement "years",
    "months", "weeks", "days", "hours", "minutes", and "seconds".
    """
    difference: String

    """Configures the locale Moment.js will use to format the date."""
    locale: String
  ): Date
  slug: String
  category: String
  color: String
  price: Int
  images: [String]
  order: Int
  variants: [MarkdownRemarkFrontmatterVariants]
  siteTitle: String
  siteDescription: String
  postsPerPage: Int
  tags: [String]
  path: String
  image: String
  imageDesc: String
  address: String
}

type MarkdownRemarkFrontmatterVariants {
  id: String
  color: String
}

type MarkdownRemarkFields {
  path: String
  category: String
  slug: String
  published: Boolean
}

type EscaladeInventory implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  stock: Int
  locations: EscaladeInventoryLocations
  productId: String
  lowerId: String
  upperId: String
}

type EscaladeInventoryLocations {
  evansville: Int
}

type EscaladePricing implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  price: Float
  formatted: String
  productId: String
  lowerId: String
  upperId: String
}
